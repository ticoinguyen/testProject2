from django.contrib.auth import authenticate, login, logout
from django.http import HttpResponseRedirect, HttpResponse
from django.template import RequestContext
from django.views.decorators.csrf import csrf_protect,csrf_exempt
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, render_to_response
from django.views import generic
from django.template import RequestContext
from app.models import Contact, Product,Carousel,MenuLeftParent,MenuLeftChild,ProductDetail,CardMaster,CardDetail
from app.forms import ContactForm,UserForm, UserProfileForm
from dns.rdatatype import NULL


# Create your views here.
class IndexView(generic.ListView):
    template_name = 'app/index.html'    
    context_object_name = 'home_list'    
    queryset = Product.objects.filter(del_if=0,type='carousel')[:12]
    def get_context_data(self, **kwargs):
        context = super(IndexView, self).get_context_data(**kwargs)
        context['carousel_list'] = Carousel.objects.filter(del_if=0)
        context['product_all_list'] = Product.objects.filter(del_if=0)
        context['menu_parent_list'] = MenuLeftParent.objects.filter(del_if=0)
        context['menu_child_list'] = MenuLeftChild.objects.filter(del_if=0)
        return context
    
def contact(request):
        if request.method == 'POST':
            form = ContactForm(request.POST)
            form.fields['name'].widget.attrs = {'class':'input-xlarge', 'placeholder':'name'}
            form.fields['email'].widget.attrs = {'class':'input-xlarge','placeholder':'email'}
            form.fields['title'].widget.attrs = {'class':'input-xlarge','placeholder':'title'}
            form.fields['message'].widget.attrs = {'class':'input-xlarge','placeholder':'message'}
            if form.is_valid():
                # save the model to database, directly from the form:
                contact = form.save()  
        else:        
            form = ContactForm()
        context_data = {'form': form}
        return render(request, 'app/contact.html', context_data )
    
def about(request):
    return render(request, 'app/about.html', '')

def special(request):
    context = {
        "menu_parent_list": MenuLeftParent.objects.filter(del_if=0),
        "menu_child_list": MenuLeftChild.objects.filter(del_if=0),
    };
    return render(request, 'app/special_offer.html', context)

def normal(request):
    context = {
        "menu_parent_list": MenuLeftParent.objects.filter(del_if=0),
        "menu_child_list": MenuLeftChild.objects.filter(del_if=0),
    };
    return render(request, 'app/normal.html', context)

def prosummary(request):
    context = {
        "menu_parent_list": MenuLeftParent.objects.filter(del_if=0),
        "menu_child_list": MenuLeftChild.objects.filter(del_if=0),
    };
    return render(request, 'app/prosummary.html', context)

def products(request):
    context = {
        "menu_parent_list": MenuLeftParent.objects.filter(del_if=0),
        "menu_child_list": MenuLeftChild.objects.filter(del_if=0),
        "products_list":Product.objects.filter(del_if=0),
    };    
    return render(request,'app/products.html',context)

class DetailProductView(generic.DetailView):
    model = Product
    template_name = 'app/detailproduct.html'  

    def get_context_data(self, **kwargs):
        context = super(DetailProductView, self).get_context_data(**kwargs)       
        try:
            context['detail'] = ProductDetail.objects.get(product=self.object)
        except ProductDetail.DoesNotExist:
            context['detail'] = None
        context['id'] = self.object.id
        context['menu_parent_list'] = MenuLeftParent.objects.filter(del_if=0)
        context['menu_child_list'] = MenuLeftChild.objects.filter(del_if=0)
        return context
     
class CategoryView(generic.DetailView):
    model = MenuLeftParent
    template_name = 'app/products.html' 

    def get_context_data(self, **kwargs):
        context = super(CategoryView, self).get_context_data(**kwargs)       
        try:
            context['products_list'] = Product.objects.filter(categoryC_id=self.object.id)
            context['number_products'] = Product.objects.filter(categoryC_id=self.object.id).count
        except Product.DoesNotExist:
            context['products_list'] = None
            context['number_products'] = 0
        context['menu_parent_list'] = MenuLeftParent.objects.filter(del_if=0)
        context['menu_child_list'] = MenuLeftChild.objects.filter(del_if=0)
        return context
@login_required
def user_logout(request):
    logout(request)
    return HttpResponseRedirect('/')
@csrf_exempt
def user_login(request):
    context = RequestContext(request)
    if request.method == 'POST':        
        username = request.POST['username']
        password = request.POST['password']       
        user = authenticate(username=username, password=password)
        if user:
            if user.is_active:
                login(request, user)
                return HttpResponseRedirect('/')
            else:
                return HttpResponse("Your demo_app account is disabled.")
        else:
            print "Invalid login details: {0}, {1}".format(username, password)
            return HttpResponse("Invalid login details supplied.")
    else:
        return render_to_response('app/index.html', {}, context)
    
def register(request):
    context = RequestContext(request)
    registered = False

    if request.method == 'POST':
        user_form = UserForm(data=request.POST)
        profile_form = UserProfileForm(data=request.POST)
        if user_form.is_valid() and profile_form.is_valid():
            user = user_form.save()            
            user.set_password(user.password)
            user.save()
            profile = profile_form.save(commit=False)
            profile.user = user           
            if 'picture' in request.FILES:
                profile.picture = request.FILES['picture']
            profile.save()           
            registered = True
        else:
            print user_form.errors, profile_form.errors

    else:
        user_form = UserForm()
        user_form.fields['first_name'].widget.attrs = {'placeholder':'First Name'}
        user_form.fields['last_name'].widget.attrs = {'placeholder':'Last Name'}
        user_form.fields['email'].widget.attrs = {'placeholder':'Email'}
        user_form.fields['username'].widget.attrs = {'placeholder':'User Name'}
        user_form.fields['password'].widget.attrs = {'placeholder':'Password'}
       
        profile_form = UserProfileForm()
        profile_form.fields['title'].widget.attrs = {'placeholder':'Title'}
        profile_form.fields['company'].widget.attrs = {'placeholder':'Company'}
        profile_form.fields['address'].widget.attrs = {'placeholder':'Address'}
        profile_form.fields['address2'].widget.attrs = {'placeholder':'Address2'}
        profile_form.fields['city'].widget.attrs = {'placeholder':'City'}
        profile_form.fields['state'].widget.attrs = {'placeholder':'State'}
        profile_form.fields['zip_code'].widget.attrs = {'placeholder':'Zip / Postal Code'}
        profile_form.fields['country'].widget.attrs = {'placeholder':'Country'}
        profile_form.fields['add_information'].widget.attrs = {'placeholder':'Add Information'}
        profile_form.fields['home_phone'].widget.attrs = {'placeholder':'Home phone'}
        profile_form.fields['mobile_phone'].widget.attrs = {'placeholder':'Mobile phone'}        
        
    context['menu_parent_list'] = MenuLeftParent.objects.filter(del_if=0)
    context['menu_child_list'] = MenuLeftChild.objects.filter(del_if=0)
    return render_to_response('app/register.html',{'user_form': user_form, 'profile_form': profile_form, 'registered': registered},context)


def add_product_to_cart(request):
    if request.method == 'POST':
        if 'id' in request.POST:
            cart = ProductDetail()
            cart.price = request.POST['price']
            cart.product_id = request.POST['id']
            cart.product.name = request.POST['name']
            cart.quantity = 1
            flag = False
            
            if not 'cartList' in request.session or not request.session['cartList']:
                request.session['cartList'] = [cart]
            else:
                listCart = request.session['cartList']
                for obj in listCart:
                    if obj.product_id == cart.product_id: 
                        obj.quantity += 1
                        flag = True
                if flag == false:
                        listCart.append(cart)
                request.session['cartList'] = listCart                
            request.session.set_expiry(604800)              
           
            print "*******Information Id: {0} {1} {2}".format(id,request.POST['price'],request.POST['name'])
            # doSomething with pieFact here...
            return HttpResponse('success') # if everything is OK
    # nothing went well
    return HttpRepsonse('FAIL!!!!!')

    
